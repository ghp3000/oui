import{_ as a,o as n,c as s,e}from"./app.9299992b.js";const i={},t=e(`<h1 id="lua-auxiliary-library" tabindex="-1"><a class="header-anchor" href="#lua-auxiliary-library" aria-hidden="true">#</a> Lua auxiliary library</h1><p>The Oui framework provides some commonly used Lua helper functions to make it easy for users to write API.</p><h2 id="oui-fs" tabindex="-1"><a class="header-anchor" href="#oui-fs" aria-hidden="true">#</a> oui.fs</h2><h3 id="writefile" tabindex="-1"><a class="header-anchor" href="#writefile" aria-hidden="true">#</a> writefile</h3><p><code>writefile(path, data, mode)</code></p><p>This function writes data to a file in the <code>mode</code> specified by the string mode.</p><p>The mode string can be any of the following values:</p><ul><li>&quot;w&quot;: Write mode (the default)</li><li>&quot;a&quot;: Append mode</li><li>&quot;r+&quot;: update mode, all previous data is preserved</li><li>&quot;w+&quot;: update mode, all previous data is erased</li><li>&quot;a+&quot;: append update mode, previous data is preserved, writing is only allowed at the end of file</li></ul><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> fs <span class="token operator">=</span> require <span class="token string">&#39;oui.fs&#39;</span>

fs<span class="token punctuation">.</span><span class="token function">writefile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello, oui\\n&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readfile" tabindex="-1"><a class="header-anchor" href="#readfile" aria-hidden="true">#</a> readfile</h3><p><code>readfile(path, format)</code></p><p>Reads the file in the specified format</p><p>The formats provided are:</p><ul><li>&quot;*a&quot;: Read the entire file (the default)</li><li>&quot;*n&quot;: reads a numeral and returns it as a float or an integer , following the lexical conventions of Lua. (The numeral may have leading spaces and a sign.) This format always reads the longest input sequence that is a valid prefix for a numeral; if that prefix does not form a valid numeral (e.g., an empty string, &quot;0x&quot;, or &quot;3.4e-&quot;), it is discarded and the function returns nil</li><li>&quot;*l&quot;: reads the next line skipping the end of line</li><li>number: reads a string with up to this number of bytes. If number is zero, it reads nothing and returns an empty string</li></ul><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> fs <span class="token operator">=</span> require <span class="token string">&#39;oui.fs&#39;</span>

<span class="token keyword">local</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dirname" tabindex="-1"><a class="header-anchor" href="#dirname" aria-hidden="true">#</a> dirname</h3><p><code>dirname(path)</code></p><p>See Linux manuals: dirname(1)</p><h3 id="basename" tabindex="-1"><a class="header-anchor" href="#basename" aria-hidden="true">#</a> basename</h3><p><code>basename(path)</code></p><p>See Linux manuals: basename(1)</p><h3 id="statvfs" tabindex="-1"><a class="header-anchor" href="#statvfs" aria-hidden="true">#</a> statvfs</h3><p><code>statvfs(path)</code></p><p>Obtain the file system information.\xA0This function returns three <code>numbers</code>, respectively: total, available, used. The unit is 1024 Byte.</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> fs <span class="token operator">=</span> require <span class="token string">&#39;oui.fs&#39;</span>

<span class="token keyword">local</span> total<span class="token punctuation">,</span> avail<span class="token punctuation">,</span> used <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statvfs</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="access" tabindex="-1"><a class="header-anchor" href="#access" aria-hidden="true">#</a> access</h3><p><code>access(path, [mode])</code></p><p>File permission check, returns a <code>Boolean</code> value.</p><p>The <code>mode</code> can be any combination of:</p><ul><li>f - Check if the file exists (default)</li><li>x - Check whether the file is executable</li><li>w - Checks whether the file is writable</li><li>r - Check whether the file is readable</li></ul><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> fs <span class="token operator">=</span> require <span class="token string">&#39;oui.fs&#39;</span>

<span class="token keyword">if</span> fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token punctuation">...</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stat" tabindex="-1"><a class="header-anchor" href="#stat" aria-hidden="true">#</a> stat</h3><p><code>stat(path)</code></p><p>Get the file information and return a <code>Table</code> with the following attributes:</p><ul><li>type - File type</li><li>nlink - Number of hard links</li><li>uid - User ID of owner</li><li>gid - Group ID of owner</li><li>size - Size(unit: 1024 Byte)</li></ul><h3 id="readlink" tabindex="-1"><a class="header-anchor" href="#readlink" aria-hidden="true">#</a> readlink</h3><p><code>readlink(path)</code></p><p>Gets the file path to which the symbolic link points</p><h3 id="dir" tabindex="-1"><a class="header-anchor" href="#dir" aria-hidden="true">#</a> dir</h3><p><code>dir(path)</code></p><p>Traversal directory</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> fs <span class="token operator">=</span> require <span class="token string">&#39;oui.fs&#39;</span>

<span class="token keyword">for</span> name <span class="token keyword">in</span> fs<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token keyword">local</span> info <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span> <span class="token operator">..</span> name<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&#39;size: &#39;</span> <span class="token operator">..</span> info<span class="token punctuation">.</span>size <span class="token operator">..</span><span class="token string">&#39; KiB&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="oui-network" tabindex="-1"><a class="header-anchor" href="#oui-network" aria-hidden="true">#</a> oui.network</h2><h3 id="ifup" tabindex="-1"><a class="header-anchor" href="#ifup" aria-hidden="true">#</a> ifup</h3><p><code>ifup(ifname)</code></p><p>Start the specified network interface</p><h3 id="ifdown" tabindex="-1"><a class="header-anchor" href="#ifdown" aria-hidden="true">#</a> ifdown</h3><p><code>ifdown(ifname)</code></p><p>Stop the specified network interface</p><h2 id="oui-md5" tabindex="-1"><a class="header-anchor" href="#oui-md5" aria-hidden="true">#</a> oui.md5</h2><h3 id="sum" tabindex="-1"><a class="header-anchor" href="#sum" aria-hidden="true">#</a> sum</h3><p><code>sum(path)</code></p><p>Calculate the MD5 value of a file</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> MD5 <span class="token operator">=</span> require <span class="token string">&#39;oui.md5&#39;</span>

<span class="token keyword">local</span> md5 <span class="token operator">=</span> MD5<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">&#39;test.bin&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> new</h3><p>Returns an MD5 context</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> MD5 <span class="token operator">=</span> require <span class="token string">&#39;oui.md5&#39;</span>

<span class="token keyword">local</span> ctx <span class="token operator">=</span> MD5<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> md5 <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>For simply calculating the MD5 value of a string, you can use the <code>md5</code> function provided by the <code>Lua-nginx</code> module.</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">local</span> md5 <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>`,58),o=[t];function l(p,c){return n(),s("div",null,o)}const d=a(i,[["render",l],["__file","lua-lib.html.vue"]]);export{d as default};
